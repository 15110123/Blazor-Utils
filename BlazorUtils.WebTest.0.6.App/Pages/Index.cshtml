@using BlazorUtils.Interfaces
@using Microsoft.AspNetCore.Blazor

@page "/"

<h1>Hello, world!</h1>
<LMTPagination nextText=">>" previousText="<<" cur="4" total="10" show="6" lastText="Last page" firstText="First page" />
Welcome to your new app.

<img style="width: 30px; height: 30px" class="sampleImg" src="http://www.planwallpaper.com/static/images/sO0mRdKW.jpeg" lmt-drag />

<input type="text" class="sampleText" />
<input type="checkbox" class="checkboxtest" checked />

<div style="width: 40px; height: 40px; display: block; background-color: brown" lmt-resize></div>

<style>
    .blue {
        color: blue;
    }

    .red {
        color: red;
    }

    .yellowBg {
        background-color: yellow;
    }
</style>

<p class="blue yellowBg">Hello</p>
<p class="blue yellowBg highlight">and</p>
<p class="blue yellowBg">then</p>
<p class="blue">Goodbye</p>
<p class="red">Goodbye</p>

<img style="width: 50px; height: 50px; margin-top: 2000px; display: block" class="sampleImg2" src="http://www.planwallpaper.com/static/images/sO0mRdKW.jpeg" lmt-drag />

<a id="preventedLink" href="https://bing.com">This link should be prevented</a>

@functions
{

protected override async Task OnAfterRenderAsync()
{
    await LMTBehavioursAsync();

    await _("#preventedLink").AsAsync().On("click", (e) =>
    {
        e.PreventDefault();
    });


    var domImg = _(".sampleImg").AsAsync();
    var domImg2 = _(".sampleImg2").AsAsync();
    var domH1 = _("h1").AsAsync();

    Console.WriteLine($"domImg2 selector is {domImg2.Selector()}");

    Console.WriteLine(await domImg.Attr("src"));
    Console.WriteLine(await domH1.Text());

    Console.WriteLine(await domH1.Css("font-size"));
    await domH1.Css("font-size", "50px");

    await EvalAsync("console.log(\"This is from Js code\")");

    await Task.Delay(3000);
    await domH1.Toggle();

    await Task.Delay(1000);

    await _("html").ToAsync().Animate(new
    {
        scrollTop = "500px"
    }, 1000, "swing", () =>
    {
        Console.WriteLine("Done scrolling!");
    });

    await _("html").ToAsync().Animate(new
    {
        scrollTop = "0px"
    }, new
    {
        duration = 4000
    });

    await domImg.On("click", (LMTEventArgs e) =>
    {
        Console.WriteLine("Clicked");
    });

    await _(".sampleText").ToAsync().On("change", (LMTEventArgs e) =>
    {
        if (e is LMTChangeEventArgs echanged)
        {
            Console.WriteLine(echanged.Value);
        }
    });

    await _("p").ToAsync().RemoveClass(((ind, str) =>
    {
        Console.WriteLine(ind);
        Console.WriteLine(str);
        return "blue";
    }));

    await _("p").ToAsync().RemoveClass("red");
    Console.WriteLine(await _(".checkboxtest").ToAsync().Prop<bool>("checked"));

    //_("p").ToggleClass("yellowBg");
    //_("p").ToggleClass("yellowBg", false);
    await _("p").ToAsync().ToggleClass(((ind, className) =>
    {
        Console.WriteLine("test ToggleClass");
        Console.WriteLine(ind);
        Console.WriteLine(className);
        return "yellowBg";
    }), true);

    Console.WriteLine("test height: ");
    Console.WriteLine(await domImg.Height());
    Console.WriteLine("Set height: ");
    await domImg.Height(200);

    Console.WriteLine("Test height with function");
    await domImg.Height(((ind, height) =>
    {
        Console.WriteLine("index: " + ind);
        Console.WriteLine("height: " + height);
        return 300;
    }));
    //domImg.Height(((ind, height) =>
    //{
    //    Console.WriteLine("index: " + ind);
    //    Console.WriteLine("height: " + height);
    //    return "400px";
    //}));

    //Console.WriteLine("innerheight: " + domImg.InnerHeight());
    //domImg.InnerHeight(700);

    //domImg.InnerHeight(((ind, value) =>
    //{
    //    Console.WriteLine("cur ind: " + ind);
    //    Console.WriteLine("cur value: " + value);
    //    return 200;
    //}));

    Console.WriteLine("Testing Width");
    Console.WriteLine("Width: " + await domImg.Width());
    await domImg.Width(50);
    await domImg.Width("100px");
    await domImg.Width(((ind, value) =>
    {
        Console.WriteLine("ind: " + ind);
        Console.WriteLine("Value: " + value);
        return "400px";
    }));

    Console.WriteLine("Testing Inner Width");
    Console.WriteLine("Inner Width: " + await domImg.InnerWidth());

    await domImg.InnerWidth(20);
    await domImg.InnerWidth("60px");

    await domImg.InnerWidth(((ind, width) =>
    {
        Console.WriteLine("ind: " + ind);
        Console.WriteLine("Width: " + width);
        return "120px";
    }));

    Console.WriteLine("Testing offset");
    Console.WriteLine("Output: ");
    Console.WriteLine((await domImg2.Offset()).Top);
    //domImg2.Offset(new Coordinate
    //{
    //    Top = 3,
    //    Left = 6
    //});
    await domImg2.Offset(((ind, coordinate) =>
    {
        Console.WriteLine("Cur ind: " + ind);
        Console.WriteLine("Cur top: " + coordinate.Top);
        Console.WriteLine("Cur left: " + coordinate.Left);
        return new Coordinate
        {
            Top = 3,
            Left = 6
        };
    }));

    //0.5.3 test
    await Dev.WarnAsync("0.5.3 test");

    Console.WriteLine("OuterHeight: ");

    await domImg2.OuterHeight(50);

    Console.WriteLine(await domImg2.OuterHeight());
    Console.WriteLine(await domImg2.OuterHeight(true));

    await domImg2.OuterHeight("20px");

    Console.WriteLine(await domImg2.OuterHeight());

    await domImg2.OuterHeight((ind, height) =>
    {
        Console.WriteLine($"Set outerHeight by function: ind {ind} height {height}");
        return 70;
    });

    Console.WriteLine(await domImg2.OuterHeight());

    await domImg2.OuterHeight((ind, height) =>
    {
        Console.WriteLine($"Set outerHeight by function: ind {ind} height {height}");
        return "80px";
    });

    Console.WriteLine(await domImg2.OuterHeight());

    Console.WriteLine("OuterWidth: ");

    await domImg2.OuterWidth(50);

    Console.WriteLine(await domImg2.OuterWidth());
    Console.WriteLine(await domImg2.OuterWidth(true));

    await domImg2.OuterWidth("20px");

    Console.WriteLine(await domImg2.OuterWidth());

    await domImg2.OuterWidth((ind, width) =>
    {
        Console.WriteLine($"Set outerWidth by function: index {ind}, width {width}");
        return 70;
    });

    Console.WriteLine(await domImg2.OuterWidth());

    await domImg2.OuterWidth((ind, width) =>
    {
        Console.WriteLine($"Set outerWidth by function: index {ind}, width {width}");
        return "80px";
    });

    Console.WriteLine(await domImg2.OuterWidth());

    Console.WriteLine($"Position {(await domImg2.Position()).Left} {(await domImg2.Position()).Top}");

    Console.WriteLine($"Scroll left {await domImg2.ScrollLeft()}");

    await domImg2.ScrollLeft(70);

    Console.WriteLine($"Scroll left {await domImg2.ScrollLeft()}");

    Console.WriteLine($"Scroll top {await domImg2.ScrollTop()}");

    await domImg2.ScrollTop(70);

    Console.WriteLine($"Scroll left {await domImg2.ScrollTop()}");

    await domImg2.On("click", (e) =>
    {
        Console.WriteLine("hello world");
    });

    await domImg2.Off("click");

    await domImg2.On("click", (e) =>
    {
        Console.WriteLine("hello world 2");
    });

    await domImg2.Off();

    await domImg2.On("click", (e) =>
    {
        Console.WriteLine("async hello world");
    });
}
}
