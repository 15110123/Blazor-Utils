@using Microsoft.AspNetCore.Blazor.Services
@using System.Text.Json.Serialization

@inject System.Net.Http.HttpClient HttpClient
@typeparam type

@implements ILMTComponent

@if (!_doneLoad)
{
    @LMTLoad
}
else
{
    if (!_lastTimeFail)
    {
        if (jsonString != null)
        {
            @LMTTry
        }
    }
    else
    {
        @LMTCatch
    }
}

@code
{
[Parameter]
private string jsonpath { get; set; }

[Parameter]
private RenderFragment LMTTry { get; set; }

[Parameter]
private bool update { get; set; } = false;

[Parameter]
RenderFragment LMTCatch { get; set; } = null;

[Parameter]
RenderFragment LMTLoad { get; set; } = null;

private bool _skipRender = true;

private string jsonString = null;

private object jsonObject = null;

private Dictionary<string, object> simpleJsonObject = null;

private bool _lastTimeFail = false;

private bool _doneLoad = false;

/// <summary>
/// Get object as generics-type. Considering use this method for code refactoring, but bad for performance improvement.
/// </summary>
/// <typeparam name="T">Returning type</typeparam>
/// <returns></returns>
public T Get<T>()
{
    if (!CheckIfJsonStringIsGet())
    {
        _lastTimeFail = true;
        return default(T);
    }

    if (jsonObject == null)
    {
        jsonObject = JsonSerializer.Parse<T>(jsonString);
        _lastTimeFail = false;
    }

    return (T)jsonObject;
}

/// <summary>
/// Get string value by key. Considering use this method for performance improvement, but bad for refactoring.
/// </summary>
/// <param name="key"></param>
/// <returns></returns>
public string Get(string key)
{
    if (!CheckIfJsonStringIsGet())
    {
        _lastTimeFail = true;
        return null;
    }

    if (simpleJsonObject == null)
    {
        simpleJsonObject = JsonSerializer.Parse<Dictionary<string, object>>(jsonString);
        _lastTimeFail = false;
    }

    //if (simpleJsonObject.ContainsKey(key))
    //{
    //    _lastTimeFail = false;
    //}

    return simpleJsonObject[key].ToString();
}

public type Get()
{
    return Get<type>();
}

public async Task Update()
{
    await InternalUpdate();
    _lastTimeFail = !CheckIfJsonStringIsGet();
    StateHasChanged();
}

private async Task InternalUpdate()
{
    var absolutePath = WebAssemblyUriHelper.Instance.ToAbsoluteUri(jsonpath);

    try
    {
        jsonString = await HttpClient.GetStringAsync(absolutePath);
    }
    catch
    {
        //Ignore
    }
}

protected override async Task OnAfterRenderAsync()
{
    if (!_doneLoad)
    {
        await InternalUpdate();
        _doneLoad = true;
        _lastTimeFail = !CheckIfJsonStringIsGet();
        StateHasChanged();
        return;
    }

    if (!update) return;
    if (_skipRender)
    {
        _skipRender = false;
        return;
    }
    await InternalUpdate();
    _skipRender = true;
    StateHasChanged();
}

private bool CheckIfJsonStringIsGet()
{
    if (LMTCatch == null) return true;
    if (jsonString == null || jsonString.Length == 0) return false;
    try
    {
        simpleJsonObject = JsonSerializer.Parse<Dictionary<string, object>>(jsonString);
    }
    catch
    {
        return false;
    }
    return true;
}
}
