<Project Sdk="Microsoft.NET.Sdk.Razor">

  <PropertyGroup>
    <BlazorLinkOnBuild>False</BlazorLinkOnBuild>
    <TargetFramework>netstandard2.0</TargetFramework>
    <RazorLangVersion>3.0</RazorLangVersion>
    <RunCommand>dotnet</RunCommand>
    <RunArguments>blazor serve</RunArguments>
    <GeneratePackageOnBuild>true</GeneratePackageOnBuild>
    <Version>0.6.0-alpha1</Version>
    <Authors>LMT Team</Authors>
    <Company>LMT</Company>
    <Description>Blazor: Provide components and utilities related to browser's DOM.
jQuery-like for Blazor is included. Just call _(Selector string) method.
Please follow the setup steps written to the README: https://github.com/15110123/Blazor-Utils</Description>
    <PackageProjectUrl>https://github.com/LMT-Team/Blazor-Utils</PackageProjectUrl>
    <RepositoryUrl>https://github.com/LMT-Team/Blazor-Utils</RepositoryUrl>
    <PackageTags>Blazor, AspNet, Dom, jQuery</PackageTags>
    <NeutralLanguage>en-US</NeutralLanguage>
    <PackageId>LMT.BlazorUtils.Dom</PackageId>
    <Product>LMT.BlazorUtils.Dom</Product>
    <PackageReleaseNotes>* 0.6.0-alpha1
~ Features 
- GlobalData: Save object that could be shared across all pages and components.  
- GlobalData has 2 modes: 
-&gt; Non-strict (default): Unlimit keys and objects are stored. There is no constrant.  
-&gt; Strict: Developers can only add key which is included in a pre-defined array of key. For instance, Calling GlobalData.SetToStrict("username", "password") will cause GlobalData to only set value for "username" and "password".  
- LMTDynamicContext: A class which inherits LMTDynamicContext can decide which component should be rendered by parameters.  

~Fixes 
- Compatible with Blazor 0.3.0 Preview 6, .NET Core 3.0.100 preview 6.  
- When component referencing (ref), "netstandard2._0.BlazorUtilsComponents" namespace prefix is removed. In the previous version, you may need this namespace declaration like this: https://github.com/15110123/Traffic-Sign-Recognizer/blob/master/TrafficSignRecognizer/TrafficSignRecognizer.Web/Pages/Index.cshtml#L63 

~Changes 
- Blazor Utils components folder is now hidden from project which references to. 
- From 0.6.0 and above, developers need to pass IJSRuntime object manually by calling JsInvoke.UseRuntime(jsRuntime) in OnInit() or OnInitAsync().  Js runtime can be obtained by Blazor's dependency injection technique.</PackageReleaseNotes>
    <PackageIconUrl>https://raw.githubusercontent.com/LMT-Team/Blazor-Utils/master/IconVer1.png</PackageIconUrl>
    <Copyright>Copyright 2019 LMT</Copyright>
    <PackageLicenseExpression>MIT</PackageLicenseExpression>
  </PropertyGroup>

  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|AnyCPU'">
    <DocumentationFile>bin\Debug\netstandard2.0\BlazorUtils.Dom.xml</DocumentationFile>
  </PropertyGroup>

  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|AnyCPU'">
    <DocumentationFile>bin\Release\netstandard2.0\BlazorUtils.Dom.xml</DocumentationFile>
  </PropertyGroup>
  
  <ItemGroup>
    <Compile Remove="DependenciesUtils.cs" />
  </ItemGroup>

  <ItemGroup>
    <None Remove="BlazorUtilsComponents\LMTLightbox.razor" />
    <None Remove="BlazorUtilsComponents\_Imports.razor" />
  </ItemGroup>

  <ItemGroup>
    <PackageReference Include="Microsoft.AspNetCore.Blazor" Version="3.0.0-preview6.19307.2" />
    <PackageReference Include="Microsoft.AspNetCore.Blazor.Build" Version="3.0.0-preview6.19307.2" />
  </ItemGroup>

  <ItemGroup>
    <ProjectReference Include="..\BlazorUtils.Interfaces\BlazorUtils.Interfaces.csproj" />
  </ItemGroup>

</Project>
