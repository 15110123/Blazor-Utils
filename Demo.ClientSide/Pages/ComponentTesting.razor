@page "/component"

@using Demo.ClientSide.Models

@inject IJSRuntime jsRuntime

<h1>Hello, world!</h1>
<LMTPagination nextText=">>" previousText="<<" cur="4" total="10" show="6" lastText="Last page" firstText="First page" onpagechange=@OnPageChange />

<LMTBreadcrumb data=@(new []{("Google", "https://google.com"), ("GMail", "https://gmail.com")}) selected="1" />

<LMTProgress style="width: 20%" value="@percentageVal" isAnimated="true" isStriped="true" label="@percentageVal.ToString()" color="danger" />
<input id="progressPerecentage" type="number" />
<button @onclick=@(() => { percentageVal = int.Parse(_("#progressPerecentage").Val()); })>Change value!</button>
<br />

<LMTLightbox @ref="@lightbox" style="color: red">
    <h1>This is why Meghan Markle wears shoes that are too big</h1>
    <p>This isn't the first time the internet has been buzzing about her shoe size. When she and Prince Harry officially announced their engagement, the Duchess of Cambridge was photographed wearing strappy beige heels that didn't hug her heel the way they're meant to.</p>
</LMTLightbox>
<button @onclick=@(() => { lightbox.Show(); })>Show lightbox</button>

<LMTTable datas="@(Student.lstStudent())" onbuttonclick="@TableFunctionClickHandler" />

<LMTSlideshow src="@(new[] {"/img/cover.jpg", "/img/home_cover.jpg", "/img/woman.jpg"})"
              style="height: 100vh"
              delay="2000"
              onimagechange="@imageChange"
              @ref="slideShow">
    <h1>Hello world! I'm a slideshow</h1>
</LMTSlideshow>
<button @onclick="@(() => { slideShow.Resume(); })">Resume slideshow</button>
<h1>Drop area</h1>
<LMTDropArea class="dropArea" ondrop="@OnDropHandler" />
<img style="height: 300px; width: 300px; display: block" src="@imgData" />

<button @onclick="@(() => { local1._("h1").Css("color", "red"); })">Change h1 to red locally</button>
<h2>Yeah!</h2>
<LMTLocal @ref="@local1">
    <h1>
        This should be changed locally
    </h1>
    <h2>Yeah!</h2>
    <style>
            /*Comment testing*/
            h1 {
                font-size: 70px;
                border: 2px solid black;
            }
            h2 {
                color: blue;
            }
            h1, #@local1.id h2 {
                font-weight: 900;
            }
    </style>
    <LMTLocal>
        <style>
            h3 {
                color: darkslateblue;
            }
        </style>
        <h3>Nested style</h3>
    </LMTLocal>
</LMTLocal>

<LMTInjector @ref="@injector" jsonpath="/json/Injection.json" type="Models.WebsiteInfo">
    <LMTTry>
        <h1>The website name is @(injector.Get("websiteName"))</h1>
        <h1>It has been here for @injector.Get("age") years!</h1>
        <h1>This website is developing by: </h1>
        @{
            foreach (var devname in injector.Get<Models.WebsiteInfo>().developers)
            {
                <h2>@devname</h2>
            }
            foreach (var devname in injector.Get().developers)
            {
                <h2>@devname</h2>
            }
        }
        <button @onclick="@(()=> { this.StateHasChanged(); })">ReRender!</button>
        <button @onclick="@(async()=> { await injector.Update(); })">Update data!</button>
    </LMTTry>
</LMTInjector>

<h1>Fallback test</h1>

<LMTInjector @ref="@failInjector" jsonpath="@_wrongUrl" type="Models.WebsiteInfo">
    <LMTTry>
        <h1>The website name is @(failInjector.Get("websiteName"))</h1>
        <h1>It has been here for @failInjector.Get("age") years!</h1>
        <h1>This website is developing by: </h1>
        @{
            foreach (var devname in failInjector.Get<Models.WebsiteInfo>().developers)
            {
                <h2>@devname</h2>
            }
            foreach (var devname in failInjector.Get().developers)
            {
                <h2>@devname</h2>
            }
        }
    </LMTTry>
    <LMTCatch>
        <h1>Fail to get data. Please check back later!</h1>
        <button @onclick="@(() => { _wrongUrl = "/json/Injection.json"; })">Change url to /json/Injection.json</button>
        <button @onclick="@(async() => {StateHasChanged() ;  await failInjector.Update(); })">Update</button>
    </LMTCatch>
</LMTInjector>

<h1>Invalid JSON test</h1>
<LMTInjector @ref="@failInjector2" jsonpath="@_invalidJSONUrl" type="Models.WebsiteInfo">
    <LMTTry>
        <h1>This text shouldn't appear!</h1>
    </LMTTry>
    <LMTCatch>
        <h1>Fail to get data. Please check back later!</h1>
        <button @onclick="@(() => { _invalidJSONUrl = "/json/Injection.json"; })">Change url to /json/Injection.json</button>
        <button @onclick="@(async() => {StateHasChanged() ;  await failInjector2.Update(); })">Update</button>
    </LMTCatch>
</LMTInjector>

<LMTDynamic TComponent="@(Demo.ClientSide.Shared.Components.AdultPlayer)"
            parameters="@(new(string, object)[] {
                              ("url", "https://tempuri.org/videos/id=123"),
                              ("starttime", 0),
                              ("repeat", false)})">
    <h2>I'm the child content!</h2>
</LMTDynamic>

<LMTDynamic TComponent="@LMTEmpty"
            Component="@GetPlayerTypeByAge(9)"
            parameters="@(new(string, object)[] {
                              ("url", "https://tempuri.org/videos/id=123"),
                              ("starttime", 0),
                              ("repeat", false)})">
    <h2>I'm the child content!</h2>
</LMTDynamic>

<LMTDynamic TComponent="@LMTEmpty"
            context="@(new Shared.Components.Player(isKid))">
    <h2>I'm the child content!</h2>
</LMTDynamic>

<style>
    .dropArea {
        display: block;
        width: 300px;
        height: 300px;
        border: 5px solid black;
    }
</style>

@code{
    private int percentageVal = 40;
    private bool isPauseSlide = false;
    private LMTLightbox lightbox;
    private LMTSlideshow slideShow;
    private string imgData { get; set; } = "#";
    private LMTLocal local1;
    private LMTInjector<Models.WebsiteInfo> injector;
    private LMTInjector<Models.WebsiteInfo> failInjector;
    private LMTInjector<Models.WebsiteInfo> failInjector2;
    private string _wrongUrl = "/json/Injecti.json";
    private string _invalidJSONUrl = "/json/invalidJSON.json";
    [Parameter]
    private string isKid { get; set; }

    protected override async Task OnInitAsync()
    {
        await base.OnInitAsync();
        JsInvoke.UseRuntime(jsRuntime);
    }

    protected override async Task OnAfterRenderAsync()
    {
        Console.WriteLine(Eval<int>("1 + 1"));
        //local1._("h1").On("click", (e) => { local1._("h2").Css("color", "red"); });
    }

    protected void imageChange(ImageChangedEventArgs e)
    {
        if (e.Cur == 1 && !isPauseSlide)
        {
            isPauseSlide = true;
            slideShow.Pause();
        }
    }

    private void OnPageChange(PageChangedEventArgs e)
    {
        Console.WriteLine("Previous page: " + e.Cur);
        Console.WriteLine("Next page: " + e.Next);
    }

    private void OnDropHandler(LMTDropEventArgs e)
    {
        if (e.StringData != null)
        {
            Dev.Warn($"You dropped an element: {e.StringData}!");
            return;
        }

        imgData = e.DataUrl;
        StateHasChanged();

        Console.WriteLine(e.FileStream);
        Console.WriteLine(e.DataBytes.Length);
        Console.WriteLine(e.File.Name);
    }

    private void TableFunctionClickHandler(LMTTableButtonClickEventArgs e)
    {
        Console.WriteLine($"Edit triggered for {e.Value}");
    }

    private Type GetPlayerTypeByAge(int age)
    {
        if (age > 10) return typeof(Shared.Components.AdultPlayer);
        return typeof(Shared.Components.KidPlayer);
    }
}